#!/bin/bash

# A set of tools for making using JIRA more seamless
# with my personal workflow.

# Written by Shane Schulte

# Usage:
# jira-tools start
# jira-tools pull-request
# jira-tools create-ticket

# Requirements:
# - fzf
# - hub
# - jq
# - go-jira (1.0.23 or newer)
# - Bash (4.4 or newer)
# - 256 color terminal support

mkdir -p "$HOME/.config/jira-tools"
config="$HOME/.config/jira-tools/config.json"
cur_path=$(readlink --canonicalize "$0")
cur_dir=$(dirname "$cur_path")
example_config="$cur_dir/example.config.json"

# Helpers for colored text
colored_text() {
    printf "\e[38;5;%sm%s\e[0m" $1 "$2"
}

_red() { colored_text 160 "$@"; }
red() { _red "$@"; printf '\n'; }

_green() { colored_text 46 "$@"; }
green() { _green "$@"; printf '\n'; }

_yellow() { colored_text 226 "$@"; }
yellow() { _yellow "$@"; printf '\n'; }

# Layout of the association file (TSV):
# {status} {ticket} {branch}

if [[ "$OSTYPE" == "darwin"* ]]; then
    alias sed=gsed
fi

if [[ "$1" == "setup" ]]; then
    set -e
    if [[ "$OSTYPE" == "darwin"* ]]; then
        brew install gsed
    fi
    if [[ "$0" != "/usr/local/bin/"* ]]; then
        cur_path=$(readlink --canonicalize "$0")
        sudo ln -sf "$cur_path" /usr/local/bin/jira-tools
        green "Installed to /usr/local/bin/jira-tools"
    fi
    # Install jq
    if ! which jq > /dev/null; then
        if [[ "$OSTYPE" == "linux-gnu" ]]; then
            sudo apt-get install jq -y
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install jq
        fi
    fi
    # Install fzf
    if ! which fzf > /dev/null; then
        if [[ "$OSTYPE" == "linux-gnu" ]]; then
            cd /tmp
            wget https://github.com/junegunn/fzf/archive/0.18.0.tar.gz
            mkdir -p fzf
            tar -xzf 0.18.0.tar.gz -C fzf
            cd fzf/fzf-0.18.0
            ./install
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install fzf
        fi
    else
        echo "fzf already installed"
    fi
    # Install go-jira
    if ! which jira > /dev/null; then
        cd /tmp
        if [[ "$OSTYPE" == "linux-gnu" ]]; then
            wget https://github.com/go-jira/jira/releases/download/v1.0.23/jira-linux-amd64
            sudo ln -sf /tmp/jira-linux-amd64 /usr/bin/jira
            sudo chmod +x /usr/bin/jira
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            wget https://github.com/go-jira/jira/releases/download/v1.0.23/jira-darwin-amd64
            sudo ln -sf /tmp/jira-darwin-amd64 $HOME/bin/jira
            sudo chmod +x $HOME/bin/jira
        fi
    else
        echo "go-jira already installed"
    fi

    # Patch the jira templates
    jira export-templates
    CREATE_TEMPLATE=$HOME/.jira.d/templates/create
    if [ ! grep -q storypoints $CREATE_TEMPLATE ]; then
        echo '  customfield_10017: {{ or .overrides.storypoints "" }}' >> $CREATE_TEMPLATE
    fi
    if [ ! grep -q sprint $CREATE_TEMPLATE ]; then
        echo '  customfield_10010: {{ or .overrides.sprint "" }}' >> $CREATE_TEMPLATE
    fi
    jira unexport-templates

    # Install hub
    if ! which hub > /dev/null; then
        if [[ "$OSTYPE" == "linux-gnu" ]]; then
            cd /tmp
            wget https://github.com/github/hub/releases/download/v2.14.1/hub-linux-amd64-2.14.1.tgz
            tar -xzf hub-linux-amd64-2.14.1.tgz
            cd hub-linux-amd64-2.14.1
            sudo ./install
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install hub
        fi
    else
        echo "hub already installed"
    fi

    if [ ! -f "$config" ]; then
        green "Copying example config to '$config'..."
        cp "$example_config" "$config"
        read -n 1 -p "Do you want to edit it now? (y/n) " c; echo
        if [[ $c == [yY] ]]; then
            $EDITOR "$config" > /dev/tty \
                || vim "$config" > /dev/tty;
        fi
    fi

    JIRA_API_TOKEN=$(jq -r ".jira.apiToken" "$config")
    if [[ "$JIRA_API_TOKEN" == "null" ]]; then
        read -p "Enter your JIRA API token: " token
        if [[ "$token" != "" ]]; then
            buf=$(cat "$config" \
                | jq -r --arg token "$token" '.jira.apiToken=$token')
            echo "$buf" | jq -r '.' > "$config"
        fi
    fi
    GITHUB_API_TOKEN=$(jq -r ".github.apiToken" "$config")
    if [[ "$GITHUB_API_TOKEN" == "null" ]]; then
        read -p "Enter your GitHub API token: " token
        if [[ "$token" != "" ]]; then
            buf=$(cat "$config" \
                | jq -r --arg token "$token" '.github.apiToken=$token')
            echo "$buf" | jq -r '.' > "$config"
        fi
    fi
    green "Setup was successful!"

    if ! crontab -l | grep -q "jira-tools daemon"; then
        green "Add the following line to your crontab to complete (crontab -e):"
        echo "*/5 * * * * /usr/local/bin/jira-tools daemon"
    fi
    exit 0
fi

# ========================================================
# Parse configuration
# ========================================================

if [ ! -f "$config" ]; then
    yellow "Missing config. Have you run 'jira-tools setup' yet?"
    exit 1
fi

get_abs_path() {
    dir=$(cd $(dirname "${1/#~/$HOME}") && pwd)
    base=$(basename "${1/#~/$HOME}")
    echo "$dir/$base"
}

read_config () {
    local -; set -e

    export jira_link_base=$(jq -r ".jira.linkBase" "$config")
    export github_repository_name=$(jq -r ".github.repoName" "$config")
    export new_ticket_text=$(jq -r ".language.newTicket" "$config")
    export new_branch_text=$(jq -r ".language.newBranch" "$config")
    export extra_review_groups=$(jq -r ".github.reviewers | .[]" "$config")
    export jira_projects=$(jq -r ".jira.projects | .[]" "$config")
    export jira_priorities=$(jq -r ".jira.priorities | .[]" "$config")
    export daemon_logs=$(get_abs_path $(jq -r ".files.daemonLogs" "$config"))
    export jira_branch_map=$(get_abs_path $(jq -r ".files.associations" "$config"))
    export JIRA_API_TOKEN=$(jq -r ".jira.apiToken" "$config")
    export GITHUB_API_TOKEN=$(jq -r ".github.apiToken" "$config")

    [[ "GITHUB_API_TOKEN" != "null" ]];
    [[ "JIRA_API_TOKEN" != "null" ]];

    touch "$jira_branch_map"
    touch "$daemon_logs"
}

if ! read_config; then
    red "Error reading $config."
    red "Try removing it and re-running 'jira-tools setup'."
    exit 1
fi

# ========================================================

quickedit_markdown() (
    trap 'rm ~/temp$$.md' exit;
    touch ~/temp$$.md;
    $EDITOR ~/temp$$.md > /dev/tty \
        || vim ~/temp$$.md > /dev/tty;
    cat ~/temp$$.md;
)

# Helpers to read the association file
get_ticket_by_branch() {
# Usage: [branch]
    local -; set -o pipefail
    grep -P "\t$1$" "$jira_branch_map" | cut -f2 | head -n1
    return $?
}

get_minimum_status_by_ticket() {
# Usage: [ticket]
    list=$(grep -P "\t$1\t" "$jira_branch_map" | cut -f1 | sort | uniq)
    echo $list | grep -o NONE \
        || echo $list | grep -o REVIEW \
        || echo $list | grep -o MERGED \
        || (echo NOTFOUND; return 1)
}

get_branch_status() {
# Usage: [branch]
    local -; set -o pipefail
    grep -P "\t$1$" "$jira_branch_map" | cut -f1
    return $?
}

get_branches_by_ticket() {
# Usage: [ticket]
    local -; set -o pipefail
    grep -P "\t$1\t" "$jira_branch_map" | cut -f3
    return $?
}

get_unmerged_branches_by_ticket() {
# Usage: [ticket]
    local -; set -o pipefail
    grep -P "^(NONE|REVIEW)\t$1" "$jira_branch_map" | cut -f3
    return $?
}

# Helpers to manipulate the association file
delete_fully_merged_ticket() {
# Usage: [ticket]
    min_status=$(get_minimum_status_by_ticket "$1")
    if [ "$min_status" = "MERGED" ]; then
        sed -i '/^MERGED\t'$1'\t.*$/d' "$jira_branch_map"
        return 0
    fi
    return 1
}

dangerously_delete_branch() {
# Usage: [branch]
    escaped=$(echo "$1" | sed 's;/;\\/;g')
    sed -i '/^[A-Z]*\t[A-Z0-9-]*\t'$escaped'$/d' "$jira_branch_map"
}

transition_branch() {
# Usage: [src status] [dest status] [branch]
    escaped=$(echo "$3" | sed 's;/;\\/;g')
    if grep -qP '^'$1'\t[A-Z0-9-]*\t'$escaped'$' "$jira_branch_map"; then
        sed -i 's/^'$1'\(\t[A-Z0-9-]*\t'$escaped'$\)/'$2'\1/' "$jira_branch_map"
        return 0
    fi
    return 1
}

track_new_branch() {
# Usage: [branch] [ticket]
    printf "NONE\t$2\t$1\n" >> "$jira_branch_map"
}

# Git helpers
git_new_branch() {
    good_branch_name=1
    while [ $good_branch_name -ne 0 ]; do
        printf '\n'
        _green "Enter a name for your branch: "
        read branch_name

        case "$branch_name" in
             *\ * )
                   red "Your branch cannot contain spaces."
                   continue
                  ;;
        esac
        git checkout -b "$branch_name"
        good_branch_name=$?
    done
    return $good_branch_name
}

git_try_checkout_branch() {
# Usage: [branch]
    git checkout "$1"
    if [ $? -ne 0 ]; then
        yellow "Couldn't find branch locally. Attempting to fetch..."
        git fetch origin "$1"
        git checkout "$1"
        if [ $? -ne 0 ]; then
            red "Couldn't find branch remotely."
            _red "Want to delete the JIRA association? (y/n) "
            read -n 1 c; echo ""
            if [[ $c == [yY] ]]; then
                dangerously_delete_branch "$1"
            fi
            return 1
        fi
    fi
}

git_reset_to_latest_master() {
    _green "Pulling latest master... "
    while ! git fetch origin master &> /dev/null; do
        _red "Fetch failed. Try again? (y/n)"
        read -n 1 c; echo ""
        if [[ $c != [yY] ]]; then
            exit 1
        fi
    done
    git reset --hard origin/master &> /dev/null
    echo "Done."
}

github_api() {
# Usage: [query]
    query="$(echo $@ | sed 's/\n//g')"
    curl --silent \
        --header "Authorization: bearer $GITHUB_API_TOKEN" \
        --request POST \
        -d "{ \"query\": \"$query\" }" \
        https://api.github.com/graphql
    return $?
}

github_resolve_merged() {
    recently_merged_query="
    query {
        viewer {
            pullRequests(states: [MERGED], last: 10) {
                nodes {
                    repository {
                        nameWithOwner
                    }
                    baseRefName
                    headRefName
                }
            }
        }
    }
    "
    for branch in $( \
        github_api "$recently_merged_query" \
        | jq -r ".data.viewer.pullRequests.nodes \
            | map( \
                select( \
                    .repository.nameWithOwner \
                    == \"$github_repository_name\" \
                    and .baseRefName == \"master\" \
                ) \
                | .headRefName \
            ) | .[]" \
        ); do
        if transition_branch "REVIEW" "MERGED" "$branch"; then
            ticket=$(get_ticket_by_branch "$branch")
            status=$(get_minimum_status_by_ticket "$ticket")
            if [[ "$status" == "MERGED" ]]; then
                ticket_status=$(jira view "$ticket" \
                    | grep "^status:" \
                    | sed 's/^status: //')
                if [[ "$ticket_status" == "In Review" || "$ticket_status" == "Review" || "$ticket_status" == "Fix ready for testing" ]]; then
                    echo "Cleaning up $ticket..."
                    jira transition "Done" "$ticket" --noedit
                    res1=$?
                    # HACK: also transition it to 'Merged', just in case 'Done' fails
                    jira transition "Merged" "$ticket" --noedit
                    res2=$?
                    # also let's get the golden workflows in here
                    jira transition "Fix successfully validated" "$ticket" --noedit
                    res3=$?
                    if [[ $res1 == 0 || $res2 == 0 || $res3 == 0 ]]; then
                        delete_fully_merged_ticket "$ticket"
                    else
                        echo "ERROR: couldn't 'merge' or 'done' for '$ticket'"
                    fi
                fi
            fi
        fi
    done
}

create_ticket() {
# Usage: [now]?
    assign_now="$1"
    fast_mode() { [[ "$assign_now" == "now" ]]; }

    project=$(echo "$jira_projects" \
        | sed '/^$/d' \
        | fzf \
            --reverse \
            --height="40%" \
            --select-1 \
            --prompt="Select a project: ")

    if [ -z "$project" ]; then
        exit 1
    fi

    issuetype=$(jira issuetypes -p "$project" \
        | cut -d ':' -f1 \
        | fzf \
            --ansi \
            --reverse \
            --height="40%" \
            --prompt="Select an issue type: ")

    if [ -z "$issuetype" ]; then
        exit 1
    fi

    read -p "Describe the ticket (title): " title
    description=$(quickedit_markdown)
    if [ "$description" = "" ]; then
        exit 1
    fi

    read -p "Estimated effort (days): " story_points

    priority=$(echo "$jira_priorities" \
        | sed '/^$/d' \
        | fzf \
            --ansi \
            --reverse \
            --height="40%" \
            --prompt="Select a priority level: ")

    if [ -z "$priority" ]; then
        exit 1
    fi

    if fast_mode; then
        sprint=$(jira current-sprint "$project")
    fi

    set -e
    if response=$(jira create \
        --project="$project" \
        --override="summary: $title" \
        --override="description:$description" \
        --override="priority: $priority" \
        --override="storypoints: $story_points" \
        --override="sprint: $sprint" \
        --issuetype="$issuetype" \
        --noedit); then
        rstatus=$(echo "$response" | cut -d ' ' -f1)
        if [ "$rstatus" != "OK" ]; then
            return 1
        fi
        ticket=$(echo "$response" | cut -d ' ' -f2)
        url=$(echo "$response" | cut -d ' ' -f3)

        if fast_mode; then
            # Attempt to self-assign the ticket
            if ! response=$(jira take2 "$ticket"); then
                red "$response"
                return 1
            fi
        fi

        # Success!
        echo "$ticket"
        return 0
    fi
    return 1
}

start_work() {
    git diff-index --quiet HEAD
    has_local_changes=$?

    if [ $has_local_changes -ne 0 ]; then
        red "Uncommitted changes detected. Please commit or stash them first."
        exit 1
    fi

    ticket_text=$( (jira mysprint; green "$new_ticket_text") \
        | sed '/^$/d' \
        | fzf \
        --ansi \
        --cycle \
        --reverse \
        --prompt="Search for a JIRA ticket: " \
        --height="40%" \
        --preview="echo {} | cut -d ':' -f1 | xargs jira")

    if [ -z "$ticket_text" ]; then
        exit 0
    fi

    if [ "$ticket_text" = "$new_ticket_text" ]; then
        if ! ticket=$(create_ticket now); then
            red "$ticket"
            red "Something went wrong creating the ticket."
            exit 1
        fi
    else
       # Split the ticket from the FZF string
       ticket=$(echo "$ticket_text" \
           | grep --color=never -oE "^[-A-Z0-9]*:" \
           | tr -d ':')
    fi

    branches=$(get_unmerged_branches_by_ticket "$ticket")
    selected_branch=$( (echo "$branches"; green "$new_branch_text") \
        | sed '/^$/d' \
        | fzf \
        --ansi \
        --cycle \
        --reverse \
        --select-1 \
        --prompt="Choose a branch to continue: " \
        --height="40%" \
        --preview="git log --oneline -n 20 --color=always {}")

    if [ -z "$selected_branch" ]; then
        exit 0
    fi

    if [ "$selected_branch" = "$new_branch_text" ]; then
        git_new_branch
        git_reset_to_latest_master
        selected_branch="$(git rev-parse --abbrev-ref HEAD)"
        green "Transitioning '$ticket' into 'In Progress'..."
        rez=$(jira transition "In Progress" "$ticket" --noedit 2>&1)
        if [[ $rez =~ "ERROR" ]]; then
            rez=$(jira transition "In Development" "$ticket" --noedit 2>&1)
            if [[ $rez =~ "ERROR" ]]; then
                jira transition "Investigating solutions for root cause" "$ticket" --noedit
                jira transition "Developing Fix" "$ticket" --noedit
            fi
        fi
        track_new_branch "$selected_branch" "$ticket"
    else
        if ! git_try_checkout_branch "$selected_branch"; then
            exit 1
        fi
    fi
}

find_samsara_reviewers() {
    echo "$extra_review_groups"
    rg -I "GithubUsername:\s+\".*\"" "go/src/samsaradev.io/team" \
            | sed 's/^[ \t]*GithubUsername:[ \t]*"\(.*\)".*$/\1/' \
            | sort
}

pull_request() {
    cd $(git rev-parse --show-toplevel)

    branch_name=$(git rev-parse --abbrev-ref HEAD)

    merge_target="master"

    if hotfix_version=$(grep -oE "u[0-9]+" <<< "$branch_name"); then
        merge_target="driver2/$hotfix_version"
    fi

    reviewers=$(find_samsara_reviewers \
        | fzf -m \
        | paste -s -d ',')

    if status=$(get_branch_status "$branch_name"); then
        if [ "$status" = "REVIEW" ]; then
            yellow "This branch already has an open PR."
            _yellow "Would you like to view it in browser?"
            read -n 1 c; echo ""
            if [[ $c == [yY] ]]; then
                gh pr view
            fi
            exit 1
        fi
        if [ "$status" = "MERGED" ]; then
            red "This branch already has a merged PR."
            exit 1
        fi

        if ticket=$(get_ticket_by_branch "$branch_name"); then

            template=$(cat .github/PULL_REQUEST_TEMPLATE.md \
                | sed -e "s@\(\*\*JIRA ticket\*\*: \)link@\1${jira_link_base}${ticket}@")

            title="[$ticket] $(jira "$ticket" | grep "^summary:" | sed 's/^summary: //')"
            hub pull-request \
                --message "$title" \
                --message "$template" \
                --reviewer "$reviewers" \
                --base "$merge_target" \
                --edit
            if [[ $? -ne 0 ]]; then
                exit 1
            fi
            transition_branch "NONE" "REVIEW" "$branch_name"
            _green "Is this ticket ready for review? (y/n) "
            read -n 1 c; echo ""
            if [[ $c == [yY] ]]; then
                rez=$(jira transition "In Review" "$ticket" --noedit 2>&1)
                if [[ $rez =~ "ERROR" ]]; then
                    jira transition "Fix ready for testing" "$ticket" --noedit 2>&1
                fi
            else
                _yellow "start a new branch based on this one? (y/n) "

                read -n 1 c; echo ""
                if [[ $c == [yY] ]]; then
                    git_new_branch
                    next_branch=$(git rev-parse --abbrev-ref HEAD)
                    track_new_branch "$next_branch" "$ticket"
                fi
            fi
            exit 0
        fi
    fi

    # TODO: try to find the jira ticket from commit messages
    hub pull-request \
        --reviewer "$reviewers" \
        --base "$merge_target" \
        --edit

    exit $?
}

# Runner Program
subcommand=$1
shift
case "$subcommand" in
    start)
        start_work $@
        ;;
    config)
        $EDITOR "$config" > /dev/tty \
            || vim "$config" > /dev/tty
        ;;
    pull-request)
        pull_request $@
        ;;
    current)
        if ticket=$(get_ticket_by_branch $(git rev-parse --abbrev-ref HEAD)); then
            if [ "$1" = "link" ]; then
                echo "${jira_link_base}${ticket}"
            else
                echo "$ticket"
            fi
            exit 0
        fi
        exit 1
        ;;
    create-ticket)
        if ticket=$(create_ticket $@); then
            green "${jira_link_base}${ticket}"
            exit 0
        fi
        exit 1
        ;;
    daemon)
        github_resolve_merged &>> "$daemon_logs"
        ;;
    *)
        echo "jira-tools [start | pull-request | create-ticket]"
        echo "...        [config | daemon]"
        ;;
esac
